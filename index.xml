<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CMSC 22000 - Introduction to Software Development on CS 220</title>
    <link>https://uchicago-cs.github.io/cmsc22000/</link>
    <description>Recent content in CMSC 22000 - Introduction to Software Development on CS 220</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Feb 2018 08:47:20 -0600</lastBuildDate>
    
	<atom:link href="https://uchicago-cs.github.io/cmsc22000/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FAQs</title>
      <link>https://uchicago-cs.github.io/cmsc22000/faq/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/faq/</guid>
      <description>Does CMSC 22000 fulfill any CS major requirements?
Yes, it can be counted as an elective in the CS major.
Can CMSC 22000 be used as a replacement for CMSC 15400?
No, CMSC 15400 is still required in the CS major. However, you are allowed to take CMSC 22000 between CMSC 15200 / 16200 and CMSC 15400.
Can I take CMSC 22000 concurrently with CMSC 15400?
This is technically possible, but strongly discouraged.</description>
    </item>
    
    <item>
      <title>Course Calendar</title>
      <link>https://uchicago-cs.github.io/cmsc22000/calendar/</link>
      <pubDate>Sat, 17 Feb 2018 08:50:04 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/calendar/</guid>
      <description>td {vertical-align:middle};    Week Date Day Zoom Meetings Pre-recorded Lecture(s) Lab Assignment Project    1 April 6 M Introduction to CS 220 The Software Development Process Git    April 10 F Discussion/Q&amp;amp;A: Software Development Process   2 April 13 M Introduction to Software Design Software Design Software Design Design Warm-up #1   April 17 F Discussion/Q&amp;amp;A: Software Design   3 April 20 M Project kick-off Implementation: Linking, Libraries, etc.</description>
    </item>
    
    <item>
      <title>Additional Resources</title>
      <link>https://uchicago-cs.github.io/cmsc22000/resources/</link>
      <pubDate>Sat, 17 Feb 2018 08:47:20 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/resources/</guid>
      <description>This page contains pointers to additional resources and readings that complement what we see in the lectures. While this class does not have a required textbook, most of the Software Engineering content draws heavily from Ian Sommerville&amp;rsquo;s book, Software Engineering.
Software Engineering Books  A Philosophy of Software Design, John Ousterhout. Yaknyam Press, 2018 Software Engineering (10th Ed.), Ian Sommerville. Pearson, 2015. The Pragmatic Programmer, Andrew Hunt, David Thomas. Addison-Wesley Professional, 1999.</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>https://uchicago-cs.github.io/cmsc22000/projects/2019/spec/</link>
      <pubDate>Sat, 17 Feb 2018 08:47:20 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/projects/2019/spec/</guid>
      <description>Text Adventure Games Project Organization and Timeline  Suggested initial goals  WDL Game State Action Management Checkpointing CLI UI     Project Evaluation  Requirements for graded work  Tasks/Issues Pull Requests to master Code Reviews Peer feedback Final Presentation   Class-wide bonus points     You wake up to find yourself in a strange hall. You have no idea how you got here.</description>
    </item>
    
    <item>
      <title>Project Features</title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/features/</link>
      <pubDate>Sat, 17 Feb 2018 08:47:20 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/features/</guid>
      <description>Each team will be assigned to work on a specific feature of chiventure. Each team will have a chance to express a preference, and we will aim to assign each team to a feature they have expressed very high interest in.
Types of features Broadly speaking, there are two types of features you will be able to work on: those that involve improving and maintaining existing code in chiventure, and those that involve implementing new features.</description>
    </item>
    
    <item>
      <title>Project Policies</title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/policies/</link>
      <pubDate>Sat, 17 Feb 2018 08:47:20 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/policies/</guid>
      <description>Project Organization Project Timeline Project Evaluation  Requirements for graded work  Tasks/Issues Pull Requests Peer feedback Final Presentation   Class-wide bonus points   Team Composition and Mobility   Project Organization In this project, you will be divided into teams of five students, and will work collaboratively (both within your team and between teams) on a complex software system, chiventure, that will involve improving existing code as well as designing and implementing new functionality.</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://uchicago-cs.github.io/cmsc22000/syllabus/</link>
      <pubDate>Sat, 17 Feb 2018 08:47:20 -0600</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/syllabus/</guid>
      <description>Course Description Developing a software system (e.g., an application, a web server, an operating system, etc.) requires much more than just knowing how to program. Software development encompasses multiple activities, such as systems design, implementation, testing, debugging, deployment, documentation, and maintenance, all weaved together by following a specific methodology. Not just that, software development is a highly collaborative activity, where certain soft skills, like effective communication and the ability to give/receive feedback, can be key to the success of a software project.</description>
    </item>
    
    <item>
      <title>Getting help on the lab assignments</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/help/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/help/</guid>
      <description>If you have any questions or get stuck on the lab assignments, there are two ways of getting help:
Slack We have a #course-labs channel on our Slack workspace that can be used to ask questions about the lab assignments. However, to keep that channel tidy we ask that you follow a couple of conventions in this channel.
The most important convention is that there should be one &amp;ldquo;thread&amp;rdquo; per question.</description>
    </item>
    
    <item>
      <title>Lab 1: Git</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab1/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab1/</guid>
      <description>Due: Wednesday, April 15th, 8pm
 NOTE: This lab is based on a Linux and Git lab originally written by Anne Rogers for CMSC 12100 (and updated and edited by a variety of instructors and TAs throughout the years)  In some of your previous CS courses, you may have become familiar with using Subversion (SVN) to handle revision control (or version control) of your projects and assignments, and to submit your work for grading.</description>
    </item>
    
    <item>
      <title>Lab 2: Software Design</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab2/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab2/</guid>
      <description>Due: Wednesday, April 22nd, 8pm
In this lab, you will carry out some basic software design tasks. This lab will be shorter than in other labs, because you will also be working on a design warmup exercise with your project team. Please note that, while the design warmup exercise is due at the same time as this lab, it will be part of your project score (it is not counted as an additional lab assignment).</description>
    </item>
    
    <item>
      <title>Lab 3: Make</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab3/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab3/</guid>
      <description>Due: Wednesday, April 29th, 8pm CDT
In the class project, you will likely produce dozens of C files that will ultimately produce a single executable. When dealing with multiple source files, specially when there are dependencies between them, it is common to use a build system instead of manually compiling and linking all the files. in this lab, we’ll explore the ways a program can be “built”&amp;ndash;that is, the way that source code is turned into binary code so that a computer can execute it.</description>
    </item>
    
    <item>
      <title>Lab 4: Debugging</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab4/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab4/</guid>
      <description>Due: Thursday, May 6th, 8pm
In this lab, you will get some practice debugging a few programs and, in particular, will resolve some of the errors we described in class. In some of the tasks, you will also become more familiar with GDB, a popular debugger.
As you work through this lab, you may want to refer to our Debugging Guide, which covers (and expands on) many of the topics we covered in class.</description>
    </item>
    
    <item>
      <title>Optional Lab: Advanced Git</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/advanced-git/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/advanced-git/</guid>
      <description>In the 150s/160s, as well as in the CS 220 labs, you have used version control systems (like Subversion and Git) essentially as a mechanism to store your code and to make it easily accessible to the course staff. However, in real software projects, version control systems are one of the most important tools that allow teams to collaborate on a shared code base.
In this lab, we will explore features of Git that are more directly related to collaborative software development, and which you will need to use during the course project.</description>
    </item>
    
    <item>
      <title>Lab 5: Testing</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab5/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab5/</guid>
      <description>Due: Wednesday, May 13th, 8pm
By this point in your CS studies, you’ve probably experienced the following at least once:
 Your programming assignment is almost done, and everything works so far. Start working on the last task of the assignment. Make some minor changes. Run program. Everything stops working. The first task, the last task, and everything in between. Spend several hours debugging your code. Narrow down the issue to a silly mistake in the first task that only made things fail once the last task was implemented.</description>
    </item>
    
    <item>
      <title>Lab 6: Continuous Integration</title>
      <link>https://uchicago-cs.github.io/cmsc22000/labs/lab6/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/labs/lab6/</guid>
      <description>Due: Wednesday, May 20th, 8pm
Continuous Integration, or CI, is the practice of frequently merging developers’ work into a mainline branch in a version control system like Git. CI almost always involves running an extensive set of test cases every time such a merge happens, or even every time new code is committed to the repository (not just on the mainline branch, but also on other branches). Thus many version control systems facilitate CI by providing mechanisms to trigger certain actions when code is pushed to a repository.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://uchicago-cs.github.io/cmsc22000/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/description/</guid>
      <description>Developing a software system (e.g., an application, a web server, an operating system, etc.) requires much more than just knowing how to program. Software development encompasses multiple activities, such as systems design, implementation, testing, debugging, deployment, documentation, and maintenance, all weaved together by following a specific methodology. Not just that, software development is a highly collaborative activity, where certain soft skills, like effective communication and the ability to give/receive feedback, can be key to the success of a software project.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/presentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/presentation/</guid>
      <description>Final Presentations  NOTE: These are the requirements for the 2019 edition of CMSC 22000. They have not yet been updated for 2020!  The final component of this course will be a series of final presentations, where each team will present the work they have done throughout the quarter. The presentations will take place on Wednesday, June 12, from 1:30pm to 3:30pm, in Ryerson 277. Each team will have 15 minutes to present (with an additional 5 minutes for questions).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://uchicago-cs.github.io/cmsc22000/projects/2019/presentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/projects/2019/presentation/</guid>
      <description>Final Presentations The final component of this course will be a series of final presentations, where each team will present the work they have done throughout the quarter. The presentations will take place on Wednesday, June 12, from 1:30pm to 3:30pm, in Ryerson 277. Each team will have 15 minutes to present (with an additional 5 minutes for questions).
Presentation Contents Each presentation must be divided into three portions: a high-level discussion of how you designed and implemented your component, a demo, and reflections.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://uchicago-cs.github.io/cmsc22000/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/summary/</guid>
      <description>Foobazzzz</description>
    </item>
    
    <item>
      <title>chiventure: a Text Adventure Game Engine</title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/chiventure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/chiventure/</guid>
      <description>You wake up to find yourself in a strange hall. You have no idea how you got here. The last thing you remember is a blinding flash of light. You look at the tapestries lining the walls for any clues on your whereabouts. The tapestries depict valiant knights, fire-breathing wyverns, armies of goblins, and fearsome rulers sitting in their gilded thrones. Wherever you are, it must be in a different world from your own.</description>
    </item>
    
    <item>
      <title>Design Exercise: Boardmaster 3000</title>
      <link>https://uchicago-cs.github.io/cmsc22000/projects/2019/design-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/projects/2019/design-1/</guid>
      <description>You have recently joined a software company that is developing an exciting new game: The Boardmaster 3000! This game will allow users to play a variety of two-player board games, all of which can be played on a square chessboard (like chess, checkers, and some variants of chess) However, we are following an incremental software development model, so we are going to start by supporting only chess. This will give us a chance to get some initial feedback on the Boardmaster 3000 before we move on to supporting other games.</description>
    </item>
    
    <item>
      <title>Design Exercise: Boardmaster 3000 (Part II)</title>
      <link>https://uchicago-cs.github.io/cmsc22000/projects/2019/design-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/projects/2019/design-2/</guid>
      <description>Good news, everyone! The first version of the Boardmaster 3000 has been a resounding success! We got a lot of quality feedback from users, which included comments like “the VR interface is like nothing I’ve seen before”, “finally, a chess game that challenges both my intellect and my senses”, and “the AI is creepily lifelike, in a good way, I guess”. We know you were not involved in any of those aspects of the game, but your modules for loading, manipulating, and saving the state of a game were an indispensable building block that made the rest of the game possible.</description>
    </item>
    
    <item>
      <title>Design Warm-up #1: Boardmaster 3000</title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/design-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/design-1/</guid>
      <description>Due: Wednesday, April 22nd, 8pm
NOTE: The late submission policy for labs does not apply to this assignment. We will be discussing this design in class on Friday, April 24th, and need all submissions ready by then.
You have recently joined a software company that is developing an exciting new game: The Boardmaster 3000! This game will allow users to play a variety of two-player board games, all of which can be played on a square chessboard (like chess, checkers, and some variants of chess) However, we are following an incremental software development model, so we are going to start by supporting only chess.</description>
    </item>
    
    <item>
      <title>Design Warm-up #2: Boardmaster 3000 (Part II)</title>
      <link>https://uchicago-cs.github.io/cmsc22000/project/design-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uchicago-cs.github.io/cmsc22000/project/design-2/</guid>
      <description>Due: Wednesday, April 29th, 8pm CDT
NOTE: The late submission policy for labs does not apply to this assignment. We will be discussing this design in class on Friday, May 1st, and need all submissions ready by then.
Good news, everyone! The first version of the Boardmaster 3000 has been a resounding success! We got a lot of quality feedback from users, which included comments like “the VR interface is like nothing I’ve seen before”, “finally, a chess game that challenges both my intellect and my senses”, and “the AI is creepily lifelike, in a good way, I guess”.</description>
    </item>
    
  </channel>
</rss>